// <auto-generated />
using System;
using Account_API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Account_API.Migrations
{
    [DbContext(typeof(WsContext))]
    [Migration("20220416140805_db")]
    partial class db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Account_API.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Email_Verified")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Account_API.Models.IpAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Account_Id")
                        .HasColumnType("int");

                    b.Property<string>("Ip1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUsed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id")
                        .IsUnique();

                    b.ToTable("IpAdress");
                });

            modelBuilder.Entity("Account_API.Models.Password", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Account_Id")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Requested_Reset")
                        .HasColumnType("bit");

                    b.Property<string>("Reset_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Reset_Time")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id")
                        .IsUnique();

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("Account_API.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Account_Id")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Billing_Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payment_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id")
                        .IsUnique();

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Account_API.Models.IpAdress", b =>
                {
                    b.HasOne("Account_API.Models.Account", "Account")
                        .WithOne("IpAdress")
                        .HasForeignKey("Account_API.Models.IpAdress", "Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Account_API.Models.Password", b =>
                {
                    b.HasOne("Account_API.Models.Account", "Account")
                        .WithOne("Password")
                        .HasForeignKey("Account_API.Models.Password", "Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Account_API.Models.Transaction", b =>
                {
                    b.HasOne("Account_API.Models.Account", "Account")
                        .WithOne("Transaction")
                        .HasForeignKey("Account_API.Models.Transaction", "Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Account_API.Models.Account", b =>
                {
                    b.Navigation("IpAdress");

                    b.Navigation("Password");

                    b.Navigation("Transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
